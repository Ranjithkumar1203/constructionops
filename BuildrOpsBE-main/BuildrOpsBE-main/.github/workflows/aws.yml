# This workflow will build and push a new golden dotnet container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push: 
       branches:    
          - '*'
#         - 'releases/**'
#         - 'staging/**'
#         - 'feature/**'
#         - 'release/**'
#         - 'GoldenImages/Dotnet/**'

#   release:
#     types: [created]
env:
  ECR_REPOSITORY: buildropsapi
  IMAGE_TAG: ${{ github.sha }}
  NEW_RELIC_LICENSE: ${{ secrets.NEW_RELIC_LICENSE }} # Taken from https://docs.github.com/en/actions/reference/environment-variables
  ECS_SERVICE: buildropsapi                 # set this to your Amazon ECS service name
  ECS_CLUSTER: BuildrOps-STG                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: cicdtest.json # set this to the path to your Amazon ECS task definition                                             
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: buildropsapi   
  
name: Deploy to Amazon ECR

jobs:
  create-golden-dotnet:
    name: Create Golden Dotnet Image
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    #defaults:
     # run:
      #  working-directory: ./GoldenImages/Dotnet
    environment: production

    steps:
   
    - name: Checkout
      uses: actions/checkout@v2


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      id: build-image
      run: |
         #ls
         # Build a docker container and
         # push it to ECR
         echo ${{ secrets.AWS_ACCESS_KEY_ID }}
         echo "as"
         docker build -f Services/Login/Login.API/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
    - uses: actions/checkout@v2
    - name: Add secrets to Task Definition
      env:
        KEY_ID: ${{ env.ECS_TASK_DEFINITION }}
      run: |
        echo "echoing KEY_ID"
        echo ${{ env.ECS_TASK_DEFINITION }}
        echo "printing working directory"
        pwd
        echo "running ls -lart for current environment"
        ls -lart
        echo "listing current user"
        whoami
        echo "running sed command with sudo"
        sudo sed -i "s:<TestVariable>:${{ secrets.AWS_SECRET_ACCESS_KEY }}:g" cicdtest.json
        echo "echoing contents of cicdtest.json after string replacement"
        cat cicdtest.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def      
      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false
        env_vars: ${{ env.CONTAINER_NAME }} Test this is test

#     - name: Notify slack success
#       if: success()
#       env:
#         SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
#       uses: voxmedia/github-action-slack-notify-build@v1
#       with:
#         channel: app-alerts
#         status: SUCCESS
#         color: good

#     - name: Notify slack fail
#       if: failure()
#       env:
#         SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
#       uses: voxmedia/github-action-slack-notify-build@v1
#       with:
#         channel: app-alerts
#         status: FAILED
#         color: danger
